# 
# Main Resource Bundle for the system
# 

# General
footer.version=2.0

# Shared Header (i.e. for login page and after logging in)
header.governmentLogoImage.alt = Government Logo Hyperlink
header.homeImage.alt = Home Image Hyperlink
header.contactImage.alt = Contact Us Image Hyperlink
header.helpImage.alt = Help Image Hyperlink

# Main Header (i.e. header after login)
header.heading = Formulary Management: Drug Submission Database
header.loggedInAs = Logged in as
header.lblVersion = Version:
header.txtVersion = 1.0.13

#Error Messages
error.recordLocked=This record is in use by another user and cannot be saved. Please log out and try again.
error.saveError=Unexpected failure during save operation.  Please EXIT the application and try again.  If the problem persists, please contact the FMDB system administrator.

# Main Navigation (i.e. navigation after login)


# Main Footer (i.e. footer after login)
footer.copyrightImage.alt = Copyright Image Hyperlink
footer.disclamerImage.alt = Disclamer Image Hyperlink
footer.privacyImage.alt = Privacy Image Hyperlink
footer.accessibilityImage.alt = Accessibility Image Hyperlink

# Login page
login.heading = Ministry of Health Services
login.subHeading = Pharmaceutical Services Division: Formulary Management
login.infoPart1 = The Formulatory Management Database Program (FMDB) of the Ministry of Health (MoH) tracks all of the processes involved in making a listing decision.
login.infoPart2 = The FM Unit manages the processes related to reviewing and making listing decisions for New Chemical Entities, New Contributors, New Indications for Old Drugs, Modifications to Criteria, Line Extensions and Generic Drugs.
login.infoPart3 = This area contains confidential information.
login.username = Userid: 
login.password = Password: 
login.loginButton = Login
login.clearButton = Clear

# Content (shared submission page properties)
details.saveButton = Save
details.clearButton = Clear
details.returnButton = Return

# Details section
details.drugDetailsSection.sectionHeading = Drug Details
details.drugDetailsSection.detailsHeading = Drug Details
details.drugDetailsSection.submissionNumber = Submission Number:
details.drugDetailsSection.xref = Xref:
details.drugDetailsSection.subType = Sub Type:
details.drugDetailsSection.receivedDate = Drug Review Start Date:
details.drugDetailsSection.chemicalName = Chemical Name:
details.drugDetailsSection.tradeName = Trade Name:
details.drugDetailsSection.indication = Indication:
details.drugDetailsSection.nocDate = NOC Date:
details.drugDetailsSection.dateReleased = Date Released:
details.drugDetailsSection.patentExpiry = Patent Expiry:
details.drugDetailsSection.dinNumber = DIN Number:
details.drugDetailsSection.dosageFormStrength = Dosage Form and Strength:
details.drugDetailsSection.dinList = DIN list:
details.drugDetailsSection.addButton = Add
details.drugDetailsSection.updateButton = Update
details.drugDetailsSection.additionalInfo = Additional Info:
details.drugDetailsSection.postToWeb = Post to Web:
details.drugDetailsSection.deleteButton = Delete

# Status section
details.statusSection.sectionHeading = Status
details.statusSection.drugProgressHeading = Drug Progress Details
details.statusSection.receivedDate = Received Date:
details.statusSection.cdrDrugReview = CDR Drug Review:
details.statusSection.status = Status:
details.statusSection.tentativeDtStandard = Tentative Completion Date (Standard):
details.statusSection.tentativeDtComplex = Tentative Completion Date (Complex):
details.statusSection.budgetImpactHeading = Budget Impact Analysis
details.statusSection.budgetImpactRequested = Requested:
details.statusSection.budgetImpactRequestDate = Requested On:
details.statusSection.budgetRequestedBy = Requested By:
details.statusSection.budgetAssignedTo = Assigned To:
details.statusSection.budgetShowActualDate = Show Actual Date:
details.statusSection.budgetNotes = BIA Notes:
details.statusSection.budgetActualDate = Actual:
details.statusSection.budgetTargetDate = Target:
details.statusSection.drugBenefitHeader = Drug Benefit Council
details.statusSection.committeeTargetDate = Target:
details.statusSection.committeeActualDate = Actual:
details.statusSection.dbcNotesLabel = DBC Notes:
details.statusSection.committeeFinalizedDate = Recommendation Finalized:
details.statusSection.committeeRecommendation = Recommendation:
details.statusSection.attachLabel = Attach to Web:
details.statusSection.specialAuthorityHeading = Special Authority Forms
details.statusSection.specialAuthorityRequired = Required:
details.statusSection.saInitiatedDate = Initiated:
details.statusSection.saNotesLabel = SA Notes:
details.statusSection.saCompletedDate = Completed:
details.statusSection.saTargetDate = Target:
details.statusSection.bnSignedDate = BN Signed:
details.statusSection.dbrInitiatedDate = DBR Initiated:
details.statusSection.pnetEffectiveDate = Pnet Effective:
details.statusSection.companyNoticeDate = Company Notice:
details.statusSection.decisionDays = Decision Days (business):
details.statusSection.decisionDaysCalendar = Decision Days (calendar):
details.statusSection.additionalInfo = Additional Info:
details.statusSection.finalHeading = Additional Info

# Review section
details.reviewSection.sectionHeading = Review
details.reviewSection.drugReviewDetailsHeading = Drug Review Details
details.reviewSection.psdRequested = PSD Requested:
details.reviewSection.reviewInitiatedDate = Initiated:
details.reviewSection.reviewer = Reviewer:
details.reviewSection.reviewQuestion = Review Question:
details.reviewSection.reviewConclusion = Review Conclusion:
details.reviewSection.targetCompletionDate = Target Completion:
details.reviewSection.actualCompletionDate = Actual Completion:
details.reviewSection.cdrSectionHeading = CDR / CEDAC
details.reviewSection.cdrInitiatedDate = CDR Initiated:
details.reviewSection.actualMeetingDate = Actual Meeting:
details.reviewSection.targetMeetingDate = Target Meeting:
details.reviewSection.cedacNotes = CEDAC Notes:
details.reviewSection.cdrRecommendationDate = CEDAC Recommendation Date:
details.reviewSection.cdrRecommendation = Recommendation:


# Company Details section
details.companyDetailsSection.sectionHeading = Company Details
details.companyDetailsSection.companyInfoHeading = Company Information
details.companyDetailsSection.companyType = Company Type
details.companyDetailsSection.companyAlias = Alias
details.companyDetailsSection.companyName = Name
details.companyDetailsSection.companyAddress = Address
details.companyDetailsSection.companyProvince = Prov./State
details.companyDetailsSection.companyCity = City
details.companyDetailsSection.companyCountry = Country
details.companyDetailsSection.companyPostalCode = Postal/Zip Code
details.companyDetailsSection.companyPhone = Work
details.companyDetailsSection.companyPhoneExtension = Ext
details.companyDetailsSection.companyFax = Fax

details.companyDetailsSection.contactInfoHeading = Contact Information
details.companyDetailsSection.contactName = Name
details.companyDetailsSection.contactTitle = Title
details.companyDetailsSection.contactAddress = Address
details.companyDetailsSection.contactProvince = Prov./State
details.companyDetailsSection.contactCity = City
details.companyDetailsSection.contactCountry = Country
details.companyDetailsSection.contactPostalCode = Postal/Zip Code
details.companyDetailsSection.contactPhone = Work
details.companyDetailsSection.contactPhoneExtension = Ext
details.companyDetailsSection.contactCell = Cell
details.companyDetailsSection.contactFax = Fax
details.companyDetailsSection.contactEmail = Email
details.companyDetailsSection.companyComments = Comments


# PLA section
details.plaSection.sectionHeading = PLA
details.plaSection.plaInfoHeading = Product Listing Agreement Information
details.plaSection.plaStatus = PLA Status:
details.plaSection.plaEffectiveDate = Negotiations initiated:
details.plaSection.plaExpiryDate = Negotiations completed:
details.plaSection.plaComments = Comments:
details.plaSection.deleteButton = Delete
details.plaSection.addButton = Add
details.plaSection.editButton = Edit
details.plaSection.confirmButton = Update
details.plaSection.date = Date:
details.plaSection.activity = Activity:
details.plaSection.datetablehead = Date
details.plaSection.activitytablehead = Activity
details.plaSection.activityLog = Actvity Log

# Economic section
details.economicSection.sectionHeading = Economic
details.economicSection.budgetAnalysisHeading = Budget Impact Analysis
details.economicSection.budgetImpactRequested = Requested:
details.economicSection.budgetImpactRequestedBy = Requested By:
details.economicSection.budgetImpactRequestedDate = Requested On:
details.economicSection.budgetImpactTargetDate = Target Completion:
details.economicSection.budgetImpactActualCompletion = Actual Completion:
details.economicSection.budgetImpactAssignedTo = Assigned To:
details.economicSection.economicAnalysisHeading = Economic Analysis
details.economicSection.economicAnalysisTable.yearsColumn.heading = Years
details.economicSection.economicAnalysisTable.negativeTwoColumn.heading = -2
details.economicSection.economicAnalysisTable.negativeOneColumn.heading = -1
details.economicSection.economicAnalysisTable.zeroColumn.heading = 0
details.economicSection.economicAnalysisTable.positiveOneColumn.heading = 1
details.economicSection.economicAnalysisTable.positiveTwoColumn.heading = 2
details.economicSection.economicAnalysisTable.positiveThreeColumn.heading = 3
details.economicSection.economicAnalysisTable.yearsColumn.companyPredictedRow = Company Predicted($M)
details.economicSection.economicAnalysisTable.yearsColumn.PSDPredictedRow = PSD Predicted($M)
details.economicSection.economicAnalysisTable.yearsColumn.PSDExpenditureRow = PSD Expenditure($M)
details.economicSection.economicAnalysisTable.yearsColumn.BCExpenditureActualRow = BC Expenditure Actual($M)
details.economicSection.economicAnalysisTable.yearsColumn.PSDPatientsActualRow = PSD Patients Actual
details.economicSection.economicAnalysisTable.yearsColumn.BCPatientsActualRow = BC Patients Actual
details.economicSection.economicComments = Comments:

# Buttons
details.saveButton = Save
details.deleteButton = Delete
details.clearButton = Clear
details.returnButton = Return

#
# Resources for the Table example
#
table_breadcrumbMouseOver=Back to Table Index
table_title=Table Index
table_mainTitle=Main Example
table_tableTitle=Table
table_tableConcepts=This example shows a sortable table with actions, filters, and preferences.
table_LastName=Last Name
table_FirstName=First Name
table_ActionDelete=Delete
table_Action1=Action 1
table_Action2=Action 2
table_Action3=Action 3
table_Action4=Action 4
table_ActionsMenuTitle=More Actions
table_Actions=Actions
table_taskStatus=Task Status
table_embeddedActionMsg=Embedded Action Selected: Parameter =
table_moreActionsMsg=More Actions Menu Selected
table_tableActionMsg=Table Action Selected
table_filterAllItems=All Items
table_filter1=Filter 1
table_filter2=Filter 2
table_filterCustom=Custom
table_customFilterLabel=Show only rows containing last name:
table_tldTitle=TLD Examples
table_actionsTitle=Actions
table_actionConcepts=This example shows how to add Actions using a JSF facet. In this example, four buttons and a drop down menu are added to the top and bottom table action bars. When the page is initially displayed, all actions are disabled. These actions are only enabled once the user has selected at least one checkbox. When the checkboxes are unselected (e.g., when clicking the deselect all button), actions are disabled again. When the user clicks on a checkbox, a Javascript function (named \"disable\") is invoked via the onClick event. The Javascript setTimeout function is used to ensure checkboxes are selected immediately, instead of waiting for the Javascript function to complete. See the \"Actions\" example class.
table_alarmsTitle=Alarms
table_alarmsConcepts=This example shows how to add alarms to table data cells.  The table data cell will appear highlighted when the alarm attribute of tableColumn is set to true. See the \"Name\" example class.
table_basicTitle=Basic Table
table_basicConcepts=This example shows how to create a basic table.
table_customTitle=Custom Title
table_customConcepts=This example shows how to create a custom table title. When using the title attribute, as shown in the Basic Table example, the component provides a default title implementation which may include information regarding paginated rows and applied filters. However, the developer may plug in their own components if desired using a JSF facet.
table_dynamicGroupTitle=Dynamic Group Table
table_dynamicGroupConcepts=This example shows how to create a binding to a backing bean to dynamically create a table layout. See the \"DynamicGroupTableBean\" example class.
table_dynamicTitle=Dynamic Table
table_dynamicConcepts=This example shows how to create a binding to a backing bean to dynamically create a group table layout. See the \"DynamicTableBean\" example class.
table_embeddedActionsTitle=Embedded Actions
table_embeddedActionsConcepts=This example shows how to add embedded actions to a table.  If the tableColumn component contains components used as embedded actions (e.g., add, delete, etc.), set the embeddedTableActions property to true and an action separator bar will appear between each child component per UI guidelines.
table_emptyCellsTitle=Empty Cells
table_embeddedActionsConcepts1=This example shows how to add an empty table cell icon (dash icon) when a table cell is inapplicable or unexpectedly empty. UI guidelines suggest not to use this for a value that is truly null, such as an empty alarm cell or a comment field which is blank, neither of which should have the icon. Further, the icon is not used for cells that contain user interface elements such as checkboxes or drop-down lists when these elements are not applicable. Instead, the elements are simply not displayed.
table_embeddedActionsConcepts2=Note: In this example, the emptyCell attribute is intentionally set to true every 5th row. However, it's up to the developer to decide how to test if the cell is truly empty. For example, you could use this syntax: emptyCell=\"# {name.value.last == null}\"
table_filterTitle=Filter
table_filterConcepts1=Basic filters are precanned options selectable via the filter drop down menu, which is defined by a JSP facet. For custom filters, the Filter panel is used. UI guidelines recommend adding a \"Custom Filter\" option to the basic options provided via the filter menu. When the \"Custom Filter\" menu is selected, an embedded panel in the table is opened, displaying facet contents provided by the developer. After the filter has been applied, UI guidelines recommend adding a \"Custom Filter Applied\" option indicating that a custom filter has been applied. Further, UI guidelines also state that the table title should indicate that a basic or custom filter has been applied. Thus, text is added to the table title via the filter attribute of the table tag.
table_filterConcepts2=Note: This functionality requires the filterId of the table component to be set. In addition, the selected value must be set as well to restore the default selected value when the embedded filter panel is closed.
table_groupTableTitle=Group Table
table_groupTableConcepts1=This example shows how to create groups of data in the same table. In a basic table, each column typically has a header and perhaps a footer. However, in a group table, each data group may have its own overall header and footer. Further, the table may display its own column footers and an overall footer below all data groups.
table_groupTableConcepts2=UI guidelines recommend that column headers and table column footers are only rendered once. Column headers typically appear at the the top of the table, above all row groups. And table column footers appear only at the bottom of the table, below all row groups. Therefore, the headerText and tableFooterText attributes only need to be defined for the first tableRowGroup component used in the table. Additional tableColumn attributes should be used for each tableRowGroup component to specify functionality, such as selectId and sort. This will allow column headers to sort on all row groups at once, for example. See the \"TableBean\" example class.
table_groupTableConcepts3=Note: UI guidelines recommend items should be unselected when no longer in view. Using the TableSelectPhaseListener object ensures that this scenario does not occur because state is cleared after the rendering phase. Although pagination is not used for a group table, we are still using the TableSelectPhaseListener object for this example. See \"Select\" example class.
table_tableFooter=Table Footer
table_groupFooter=Group Footer
table_groupHeader=Group Header
table_columnFooter=Column Footer
table_tableColumnFooter=Table Column Footer
table_alignedRight=Right-Aligned Text
table_hiddenSelectedRowsTitle=Hidden Selected Rows
table_hiddenSelectedRowsConcepts1=This example shows a column of checkbox components used to select multiple table rows. Dynamic row highlighting is set by invoking the initAllRows function when ever the state of the checkbox changes. This state is maintained via the selected attribute of the tableRowGroup tag.
table_hiddenSelectedRowsConcepts2=Note: UI guidelines recommend items should be unselected when no longer in view. However, there are cases when maintaining state across pages is necessary. When maintaining state, set the selectedRows attribute for the table tag. This will display text in the table title and footer indicating the number of selected rows hidden from view. See the \"Select\" example class.
table_liteTitle=Lite Table
table_liteConcepts=This example shows how to create a basic table that looks lighter weight, generally by omitting the shading around the table and in the title bar.
table_nestedColumnsTitle=Multiple Headers & Footers
table_nestedColumnsConcepts1=This example shows how the table behaves when columns are nested.
table_nestedColumnsConcepts2=Note:  Currently, only the footerText, headerText, and tableFooterText attributes of TableColumn are supported in this configuration.  Sorting is currently not supported for Multiple Headers & Footers.
table_paginatedTableTitle=Paginated Table
table_paginatedTableConcepts1=This example shows how to create a paginated table. The default number of rows to be displayed for a paginated table is 25 per page. However, the developer may override this value via the rows attribute.
table_paginatedTableConcepts2=Note: The rows attribute is used only for paginated tables.
table_preferencesTitle=Preferences
table_preferencesConcepts1=This example shows how to add Preferences via the Preferences panel. The Preferences panel toggle button is shown only when using a JSF facet. This button opens an embedded panel in the table, displaying facet contents provided by the developer.
table_preferencesConcepts2=In this example, the Preferences panel is used to set the number of paginated rows via the rows attribute of tableRowGroup. See the \"Preferences\" example class.
table_selectMultipleRowsTitle=Select Multiple Rows
table_selectMultipleRowsConcepts1=This example shows a column of checkbox components used to select multiple table rows. Dynamic row highlighting is set by invoking the initAllRows function when ever the state of the checkbox changes. This state is maintained via the selected attribute of the tableRowGroup tag. Note that this example does not maintain state across paginated pages.
table_selectMultipleRowsConcepts2=Note: UI guidelines recommend items should be unselected when no longer in view. Using the TableSelectPhaseListener object ensures that this scenario does not occur because state is cleared after the rendering phase.  See the \"Select" example class.
table_selectSingleRowTitle=Select Single Row
table_selectSingleRowConcepts1=This example shows a column of radiobutton components used to select a single table row. Dynamic row highlighting is set by invoking the initAllRows function when ever the state of the radiobutton changes. This state is maintained via the selected attribute of the tableRowGroup tag. Note that this example does not maintain state across paginated pages.
table_selectSingleRowConcepts2=Note: UI guidelines recommend items should be unselected when no longer in view. Using the TableSelectPhaseListener object ensures that this scenario does not occur because state is cleared after the rendering phase.  See the \"Select" example class.
table_spacerColumnTitle=Spacer Column
table_spacerColumnConcepts=When displaying properties for a single object, a property table might be useful. A property table typically includes two data columns. The first column identifies the properties of the object, and the second column displays the values for each of the properties. The remaining width of the table displays a third, blank column to keep the first two columns next to one another while still having the table fill the full screen width. Leave the column heading of the third and final column blank, and display no data in this column.  Set a value for the width attribute to achieve the desired spacing.
table_sortableTableTitle=Sortable Table
table_sortableTableConcepts1=This example shows how to add table sorting. Note that the value binding objects used when sorting must be the proper type. For example, when the String values \"2\" and \"11\" are sorted, \"11\" is displayed before \"2\". Instead, developers should sort using objects such as Number, Character, Date, Boolean, etc.
table_sortableTableConcepts2=Note: UI guidelines recommend not setting a default initial sort; however, developers may do so using the addSort(SortCriteria) method of TableRowGroup. When the table is rendered, data will be sorted and the primary sort column highlighted.
table_sortableTableConcepts3=Note: Either a FieldKey id or value binding may be used to define criteria for sorting the contents of TableDataProvider. However, when sorting a column of checkboxes/radiobuttons, a value binding must be used because values are external to the data (i.e., TableDataProvider does not contain FieldKey ids for a selected checkbox value).
table_ok=OK
table_cancel=Cancel
